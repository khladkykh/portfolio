{"ast":null,"code":"var _jsxFileName = \"/Users/katerinagladkih/Library/Mobile Documents/com~apple~CloudDocs/WebDev/projects/quizzical/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Question from \"./components/Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [allQuestions, setallQuestions] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&difficulty=medium&type=multiple\").then(res => res.json()).then(results => setallQuestions(results.results));\n  }, []);\n  function generateNewQuestion() {\n    setallQuestions(oldQuestion => ({\n      allQuestions: [...oldQuestion, {\n        \"isHeld\": false\n      }]\n    }));\n  }\n  function addNewQuestion() {\n    const newQuestion = [];\n    for (let i = 0; i < 20; i++) {\n      newQuestion.push(generateNewQuestion());\n    }\n    return newQuestion;\n  }\n  function shuffleAnswers(answers) {\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n  const questionEl = allQuestions.map(question => {\n    const answers = shuffleAnswers([question.correct_answer, ...question.incorrect_answers]);\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: question.question,\n      answers: answers\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [questionEl, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"answer-button\",\n      onClick: addNewQuestion,\n      children: \"Check answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EvXVknt+tyX6OZfq/DWUzSKMi7M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Question","nanoid","App","allQuestions","setallQuestions","useState","useEffect","fetch","then","res","json","results","generateNewQuestion","oldQuestion","addNewQuestion","newQuestion","i","push","shuffleAnswers","answers","length","j","Math","floor","random","questionEl","map","question","correct_answer","incorrect_answers"],"sources":["/Users/katerinagladkih/Library/Mobile Documents/com~apple~CloudDocs/WebDev/projects/quizzical/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Question from \"./components/Question\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n\n  const [allQuestions, setallQuestions] = React.useState([])\n  \n    \n     React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&difficulty=medium&type=multiple\")\n        .then(res => res.json())\n        .then(results => setallQuestions(results.results))\n    }, [])\n\n    function generateNewQuestion(){\n      setallQuestions(oldQuestion => ({\n        allQuestions: [...oldQuestion, {\"isHeld\": false}]\n      }))\n    }\n\n    function addNewQuestion(){\n      const newQuestion = []\n      for (let i = 0; i < 20; i++){\n        newQuestion.push(generateNewQuestion())\n      }\n      return newQuestion\n    }\n\n    function shuffleAnswers(answers) {\n      for (let i = answers.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [answers[i], answers[j]] = [answers[j], answers[i]];\n      }\n      return answers;\n    }\n    \n    const questionEl = allQuestions.map(question => {\n      const answers = shuffleAnswers([question.correct_answer, ...question.incorrect_answers]);\n      return (\n        <Question\n          key={nanoid()}\n          question={question.question}\n          answers={answers}\n        />\n      );\n    });\n    \n\n  return (\n    <div className=\"App\">\n      {questionEl}\n      <button className=\"answer-button\" onClick={addNewQuestion}>Check answers</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;EAGvDN,KAAK,CAACO,SAAS,CAAC,MAAM;IACnBC,KAAK,CAAC,sEAAsE,CAAC,CAC5EC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,OAAO,IAAIP,eAAe,CAACO,OAAO,CAACA,OAAO,CAAC,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,SAASC,mBAAmB,GAAE;IAC5BR,eAAe,CAACS,WAAW,KAAK;MAC9BV,YAAY,EAAE,CAAC,GAAGU,WAAW,EAAE;QAAC,QAAQ,EAAE;MAAK,CAAC;IAClD,CAAC,CAAC,CAAC;EACL;EAEA,SAASC,cAAc,GAAE;IACvB,MAAMC,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MAC1BD,WAAW,CAACE,IAAI,CAACL,mBAAmB,EAAE,CAAC;IACzC;IACA,OAAOG,WAAW;EACpB;EAEA,SAASG,cAAc,CAACC,OAAO,EAAE;IAC/B,KAAK,IAAIH,CAAC,GAAGG,OAAO,CAACC,MAAM,GAAG,CAAC,EAAEJ,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,MAAMK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIR,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACG,OAAO,CAACH,CAAC,CAAC,EAAEG,OAAO,CAACE,CAAC,CAAC,CAAC,GAAG,CAACF,OAAO,CAACE,CAAC,CAAC,EAAEF,OAAO,CAACH,CAAC,CAAC,CAAC;IACrD;IACA,OAAOG,OAAO;EAChB;EAEA,MAAMM,UAAU,GAAGtB,YAAY,CAACuB,GAAG,CAACC,QAAQ,IAAI;IAC9C,MAAMR,OAAO,GAAGD,cAAc,CAAC,CAACS,QAAQ,CAACC,cAAc,EAAE,GAAGD,QAAQ,CAACE,iBAAiB,CAAC,CAAC;IACxF,oBACE,QAAC,QAAQ;MAEP,QAAQ,EAAEF,QAAQ,CAACA,QAAS;MAC5B,OAAO,EAAER;IAAQ,GAFZlB,MAAM,EAAE;MAAA;MAAA;MAAA;IAAA,QAGb;EAEN,CAAC,CAAC;EAGJ,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,WACjBwB,UAAU,eACX;MAAQ,SAAS,EAAC,eAAe;MAAC,OAAO,EAAEX,cAAe;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7E;AAEV;AAAC,GAnDQZ,GAAG;AAAA,KAAHA,GAAG;AAqDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/katerinagladkih/Library/Mobile Documents/com~apple~CloudDocs/WebDev/projects/quizzical/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Question from \"./components/Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [allQuestions, setallQuestions] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&difficulty=medium&type=multiple\").then(res => res.json()).then(results => setallQuestions(results.results));\n  }, []);\n  function allNewQuestions() {\n    const newQuestions = [];\n    const newQuestion = setallQuestions(oldQuestion => {\n      return {\n        ...oldQuestion,\n        isHeld: false\n      };\n    });\n    for (let i = 0; i < allQuestions.length; i++) {\n      newQuestions.push(newQuestion());\n    }\n    return newQuestions;\n  }\n  console.log(allNewQuestions());\n  function shuffleAnswers(answers) {\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n  const questionEl = allQuestions.map(question => {\n    const answers = shuffleAnswers([question.correct_answer, ...question.incorrect_answers]);\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: question.question,\n      answers: answers\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [questionEl, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"answer-button\",\n      children: \"Check answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EvXVknt+tyX6OZfq/DWUzSKMi7M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Question","nanoid","App","allQuestions","setallQuestions","useState","useEffect","fetch","then","res","json","results","allNewQuestions","newQuestions","newQuestion","oldQuestion","isHeld","i","length","push","console","log","shuffleAnswers","answers","j","Math","floor","random","questionEl","map","question","correct_answer","incorrect_answers"],"sources":["/Users/katerinagladkih/Library/Mobile Documents/com~apple~CloudDocs/WebDev/projects/quizzical/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Question from \"./components/Question\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n\n  const [allQuestions, setallQuestions] = React.useState([])\n\n    \n     React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&difficulty=medium&type=multiple\")\n        .then(res => res.json())\n        .then(results => setallQuestions(results.results))\n    }, [])\n    \n    function allNewQuestions(){\n      const newQuestions = [];\n      const newQuestion = setallQuestions(oldQuestion => {return{\n        ...oldQuestion,\n        isHeld: false\n      }})\n      for (let i = 0; i < allQuestions.length; i++){\n        newQuestions.push(newQuestion())\n      }\n      return newQuestions;\n    }\n    console.log(allNewQuestions())\n\n    function shuffleAnswers(answers) {\n      for (let i = answers.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [answers[i], answers[j]] = [answers[j], answers[i]];\n      }\n      return answers;\n    }\n    \n    const questionEl = allQuestions.map(question => {\n      const answers = shuffleAnswers([question.correct_answer, ...question.incorrect_answers]);\n      return (\n        <Question\n          key={nanoid()}\n          question={question.question}\n          answers={answers}\n        />\n      );\n    });\n    \n\n  return (\n    <div className=\"App\">\n      {questionEl}\n      <button className=\"answer-button\">Check answers</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;EAGvDN,KAAK,CAACO,SAAS,CAAC,MAAM;IACnBC,KAAK,CAAC,sEAAsE,CAAC,CAC5EC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,OAAO,IAAIP,eAAe,CAACO,OAAO,CAACA,OAAO,CAAC,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,SAASC,eAAe,GAAE;IACxB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,WAAW,GAAGV,eAAe,CAACW,WAAW,IAAI;MAAC,OAAM;QACxD,GAAGA,WAAW;QACdC,MAAM,EAAE;MACV,CAAC;IAAA,CAAC,CAAC;IACH,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,YAAY,CAACe,MAAM,EAAED,CAAC,EAAE,EAAC;MAC3CJ,YAAY,CAACM,IAAI,CAACL,WAAW,EAAE,CAAC;IAClC;IACA,OAAOD,YAAY;EACrB;EACAO,OAAO,CAACC,GAAG,CAACT,eAAe,EAAE,CAAC;EAE9B,SAASU,cAAc,CAACC,OAAO,EAAE;IAC/B,KAAK,IAAIN,CAAC,GAAGM,OAAO,CAACL,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,MAAMO,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIV,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACM,OAAO,CAACN,CAAC,CAAC,EAAEM,OAAO,CAACC,CAAC,CAAC,CAAC,GAAG,CAACD,OAAO,CAACC,CAAC,CAAC,EAAED,OAAO,CAACN,CAAC,CAAC,CAAC;IACrD;IACA,OAAOM,OAAO;EAChB;EAEA,MAAMK,UAAU,GAAGzB,YAAY,CAAC0B,GAAG,CAACC,QAAQ,IAAI;IAC9C,MAAMP,OAAO,GAAGD,cAAc,CAAC,CAACQ,QAAQ,CAACC,cAAc,EAAE,GAAGD,QAAQ,CAACE,iBAAiB,CAAC,CAAC;IACxF,oBACE,QAAC,QAAQ;MAEP,QAAQ,EAAEF,QAAQ,CAACA,QAAS;MAC5B,OAAO,EAAEP;IAAQ,GAFZtB,MAAM,EAAE;MAAA;MAAA;MAAA;IAAA,QAGb;EAEN,CAAC,CAAC;EAGJ,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,WACjB2B,UAAU,eACX;MAAQ,SAAS,EAAC,eAAe;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACpD;AAEV;AAAC,GAlDQ1B,GAAG;AAAA,KAAHA,GAAG;AAoDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}